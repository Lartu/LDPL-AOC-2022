INCLUDE "../aoc_lib.ldpl"
INCLUDE "aux.ldpl"

DATA:
FILE_CONTENTS               IS TEXT
LINE                        IS TEXT
LINES                       IS TEXT LIST
NUMBER_OF_[]S               IS NUMBER
STACKS                      IS LIST OF LISTS OF TEXT
START_INDEX                 IS NUMBER
LINE_LENGTH                 IS NUMBER
BLOCK                       IS TEXT
STACK_NUMBER                IS NUMBER
STACK_COUNT                 IS NUMBER
TOKENS                      IS TEXT LIST
TOKEN_COUNT                 IS NUMBER
MOVE_WORD_COUNT             IS NUMBER
MOVE_COM_COUNT              IS NUMBER
MOVE_COM_FROM               IS NUMBER
MOVE_COM_TO                 IS NUMBER
STACK_LENGTH                IS NUMBER
DELETE_COUNT                IS NUMBER

PROCEDURE:
# LOAD INPUT
LOAD FILE "input.txt" IN FILE_CONTENTS
# LOAD FILE "example_input.txt" IN FILE_CONTENTS
SPLIT FILE_CONTENTS BY "\n" IN LINES

# GET BLOCK LINES
FOR EACH LINE IN LINES DO
    # COUNT NUMBER OF [s TO SEE IF LINE IS VALID BLOCK LINE
    COUNT "[" FROM LINE IN NUMBER_OF_[]S
    IF NUMBER_OF_[]S IS EQUAL TO 0 THEN
        # THE FIRST LINE WITHOUT BLOCKS IS THE STACK COUNT. GET THE REAL
        # STACK COUNT FROM HERE TO HAVE IT FOR THE FUTURE.
        TRIM LINE IN LINE
        SPLIT LINE BY " " IN TOKENS
        GET LENGTH OF TOKENS IN TOKEN_COUNT
        SUBTRACT 1 FROM TOKEN_COUNT IN TOKEN_COUNT
        STORE TOKENS:TOKEN_COUNT IN STACK_COUNT
        BREAK
    END IF
    # IF WE ARE HERE, IT IS A VALID LINE. ADD BLOCKS:
    GET LENGTH OF LINE IN LINE_LENGTH
    STORE 0 IN START_INDEX
    STORE 0 IN STACK_NUMBER
    WHILE START_INDEX IS LESS THAN LINE_LENGTH DO
        SUBSTRING LINE FROM START_INDEX LENGTH 4 IN BLOCK
        DISPLAY BLOCK " "
        TRIM BLOCK IN BLOCK
        REPLACE "[" FROM BLOCK WITH "" IN BLOCK
        REPLACE "]" FROM BLOCK WITH "" IN BLOCK
        GET LENGTH OF STACKS IN STACK_COUNT
        IF STACK_COUNT IS LESS THAN OR EQUAL TO STACK_NUMBER THEN
            PUSH LIST TO STACKS
        END IF
        IF BLOCK IS NOT EQUAL TO "" THEN
            PUSH BLOCK TO STACKS:STACK_NUMBER
        END IF
        ADD START_INDEX AND 4 IN START_INDEX
        ADD STACK_NUMBER AND 1 IN STACK_NUMBER
    REPEAT
    DISPLAY CRLF
REPEAT

# NOW THAT WE HAVE ALL BLOCKS IN THEIR STACKS, WE HAVE TO REVERSE THE
# STACKS BECAUSE THE STACK_NUMBER BLOCKS WHERE ADDED FIRST
STORE 0 IN STACK_NUMBER
WHILE STACK_NUMBER IS LESS THAN STACK_COUNT DO
    REVERSE LIST STACKS:STACK_NUMBER
    DISPLAY "(STACK " STACK_NUMBER ") ||"
    DISPLAY LIST STACKS:STACK_NUMBER
    DISPLAY CRLF
    ADD 1 AND STACK_NUMBER IN STACK_NUMBER
REPEAT

# NOW WE HAVE ALL STACKS WITH THEIR RESPECTIVE BOXES LOADED, PARSE THE
# MOVE LINES.
FOR EACH LINE IN LINES DO
    COUNT "move" FROM LINE IN MOVE_WORD_COUNT
    IF MOVE_WORD_COUNT IS EQUAL TO 0 THEN
        CONTINUE
    END IF
    PARSE MOVE LINE INTO MOVE_COM_COUNT AND MOVE_COM_FROM AND MOVE_COM_TO
    DISPLAY "Moving " MOVE_COM_COUNT " FROM " MOVE_COM_FROM " TO " MOVE_COM_TO CRLF
    # THIS TIME, BLOCKS ARE MOVED TOGETHER.
    STORE MOVE_COM_COUNT IN DELETE_COUNT
    WHILE MOVE_COM_COUNT IS GREATER THAN 0 DO
        GET LENGTH OF STACKS:MOVE_COM_FROM IN STACK_LENGTH
        SUBTRACT MOVE_COM_COUNT FROM STACK_LENGTH IN STACK_LENGTH
        PUSH STACKS:MOVE_COM_FROM:STACK_LENGTH TO STACKS:MOVE_COM_TO
        SUBTRACT 1 FROM MOVE_COM_COUNT IN MOVE_COM_COUNT
    REPEAT
    WHILE DELETE_COUNT IS GREATER THAN 0 DO
        DELETE LAST ELEMENT OF STACKS:MOVE_COM_FROM
        SUBTRACT 1 FROM DELETE_COUNT IN DELETE_COUNT
    REPEAT
REPEAT

# ALL MOVES HAVE BEEN PERFORMED. DISPLAY THE STACKS
STORE 0 IN STACK_NUMBER
WHILE STACK_NUMBER IS LESS THAN STACK_COUNT DO
    DISPLAY "(STACK " STACK_NUMBER ") ||"
    DISPLAY LIST STACKS:STACK_NUMBER
    DISPLAY CRLF
    ADD 1 AND STACK_NUMBER IN STACK_NUMBER
REPEAT

# DISPLAY THE MESSAGE
STORE 0 IN STACK_NUMBER
DISPLAY "The message is: "
WHILE STACK_NUMBER IS LESS THAN STACK_COUNT DO
    GET LENGTH OF STACKS:STACK_NUMBER IN STACK_LENGTH
    SUBTRACT 1 FROM STACK_LENGTH IN STACK_LENGTH
    DISPLAY STACKS:STACK_NUMBER:STACK_LENGTH
    ADD 1 AND STACK_NUMBER IN STACK_NUMBER
REPEAT
DISPLAY CRLF