PROCEDURE:

SUB-PROCEDURE GET_VALUE_FOR_PLAY
    # Given ABCXYZ, returns Rock, Paper or Scissors
    PARAMETERS:
        PLAY IS TEXT
        RESULT IS TEXT
    PROCEDURE:
        IF PLAY IS EQUAL TO "A" OR PLAY IS EQUAL TO "X" THEN
            STORE "ROCK" IN RESULT
        ELSE IF PLAY IS EQUAL TO "B" OR PLAY IS EQUAL TO "Y" THEN
            STORE "PAPER" IN RESULT
        ELSE IF PLAY IS EQUAL TO "C" OR PLAY IS EQUAL TO "Z" THEN
            STORE "SCISSORS" IN RESULT
        ELSE
            DISPLAY "INVALID PLAY VALUE: " PLAY CRLF
            EXIT
        END IF
END SUB-PROCEDURE
CREATE STATEMENT "GET NAME OF PLAY $ IN $" EXECUTING GET_VALUE_FOR_PLAY

SUB-PROCEDURE GET_VALUE_FOR_RESULT
    # Given XYZ, returns Lose, Draw or Win
    PARAMETERS:
        RESULT IS TEXT
        VALUE IS TEXT
    PROCEDURE:
        IF RESULT IS EQUAL TO "X" THEN
            STORE "LOSE" IN VALUE
        ELSE IF RESULT IS EQUAL TO "Y" THEN
            STORE "DRAW" IN VALUE
        ELSE IF RESULT IS EQUAL TO "Z" THEN
            STORE "WIN" IN VALUE
        ELSE
            DISPLAY "INVALID RESULT VALUE: " RESULT CRLF
            EXIT
        END IF
END SUB-PROCEDURE
CREATE STATEMENT "GET NAME OF RESULT $ IN $" EXECUTING GET_VALUE_FOR_RESULT


SUB-PROCEDURE GET_SCORE
    # Given your opponents play and your play, returns the score for the game.
    PARAMETERS:
        MY_PLAY IS TEXT
        OP_PLAY IS TEXT
        SCORE   IS NUMBER
    LOCAL DATA:
        ROCK IS NUMBER
        PAPER IS NUMBER
        SCISSORS IS NUMBER
        LOSE IS NUMBER
        DRAW IS NUMBER
        WIN IS NUMBER
    PROCEDURE:
        #Constants
        STORE 1 IN ROCK
        STORE 2 IN PAPER
        STORE 3 IN SCISSORS
        STORE 0 IN LOSE
        STORE 3 IN DRAW
        STORE 6 IN WIN

        # Score
        STORE 0 IN SCORE

        # Rock - Rock
        IF MY_PLAY IS EQUAL TO      "ROCK"     AND OP_PLAY IS EQUAL TO "ROCK"     THEN
            ADD ROCK AND DRAW IN SCORE
        # Rock - Paper
        ELSE IF MY_PLAY IS EQUAL TO "ROCK"     AND OP_PLAY IS EQUAL TO "PAPER"    THEN
            ADD ROCK AND LOSE IN SCORE
        # Rock - Scissors
        ELSE IF MY_PLAY IS EQUAL TO "ROCK"     AND OP_PLAY IS EQUAL TO "SCISSORS" THEN
            ADD ROCK AND WIN IN SCORE
        # Paper - Rock
        ELSE IF MY_PLAY IS EQUAL TO "PAPER"    AND OP_PLAY IS EQUAL TO "ROCK"     THEN
            ADD PAPER AND WIN IN SCORE
        # Paper - Paper
        ELSE IF MY_PLAY IS EQUAL TO "PAPER"    AND OP_PLAY IS EQUAL TO "PAPER"    THEN
            ADD PAPER AND DRAW IN SCORE
        # Paper - Scissors
        ELSE IF MY_PLAY IS EQUAL TO "PAPER"    AND OP_PLAY IS EQUAL TO "SCISSORS" THEN
            ADD PAPER AND LOSE IN SCORE
        # Scissors - Rock
        ELSE IF MY_PLAY IS EQUAL TO "SCISSORS" AND OP_PLAY IS EQUAL TO "ROCK"     THEN
            ADD SCISSORS AND LOSE IN SCORE
        # Scissors - Paper
        ELSE IF MY_PLAY IS EQUAL TO "SCISSORS" AND OP_PLAY IS EQUAL TO "PAPER"    THEN
            ADD SCISSORS AND WIN IN SCORE
        # Scissors - Scissors
        ELSE IF MY_PLAY IS EQUAL TO "SCISSORS" AND OP_PLAY IS EQUAL TO "SCISSORS" THEN
            ADD SCISSORS AND DRAW IN SCORE
        ELSE
            DISPLAY "Invalid play " MY_PLAY " vs " OP_PLAY CRLF
            EXIT
        END IF
        DISPLAY "Score for play " OP_PLAY " against " MY_PLAY " is " SCORE CRLF
END SUB-PROCEDURE
CREATE STATEMENT "GET SCORE FOR $ AGAINST $ IN $" EXECUTING GET_SCORE


SUB-PROCEDURE GET_SCORE_FOR_DESIRED_RESULT
    # Given your opponents play and a desired result, returns the score for the game.
    PARAMETERS:
        OP_PLAY IS TEXT
        DESIRED_RESULT IS TEXT
        SCORE   IS NUMBER
    LOCAL DATA:
        ROCK IS NUMBER
        PAPER IS NUMBER
        SCISSORS IS NUMBER
        LOSE IS NUMBER
        DRAW IS NUMBER
        WIN IS NUMBER
    PROCEDURE:
        #Constants
        STORE 1 IN ROCK
        STORE 2 IN PAPER
        STORE 3 IN SCISSORS
        STORE 0 IN LOSE
        STORE 3 IN DRAW
        STORE 6 IN WIN

        # Score
        STORE 0 IN SCORE

        IF DESIRED_RESULT IS EQUAL TO      "WIN"  AND OP_PLAY IS EQUAL TO "ROCK"     THEN
            ADD PAPER AND WIN IN SCORE

        ELSE IF DESIRED_RESULT IS EQUAL TO "WIN"  AND OP_PLAY IS EQUAL TO "PAPER"    THEN
            ADD SCISSORS AND WIN IN SCORE
            
        ELSE IF DESIRED_RESULT IS EQUAL TO "WIN"  AND OP_PLAY IS EQUAL TO "SCISSORS" THEN
            ADD ROCK AND WIN IN SCORE
            
        ELSE IF DESIRED_RESULT IS EQUAL TO "DRAW" AND OP_PLAY IS EQUAL TO "ROCK"     THEN
            ADD ROCK AND DRAW IN SCORE
            
        ELSE IF DESIRED_RESULT IS EQUAL TO "DRAW" AND OP_PLAY IS EQUAL TO "PAPER"    THEN
            ADD PAPER AND DRAW IN SCORE
            
        ELSE IF DESIRED_RESULT IS EQUAL TO "DRAW" AND OP_PLAY IS EQUAL TO "SCISSORS" THEN
            ADD SCISSORS AND DRAW IN SCORE
            
        ELSE IF DESIRED_RESULT IS EQUAL TO "LOSE" AND OP_PLAY IS EQUAL TO "ROCK"     THEN
            ADD SCISSORS AND LOSE IN SCORE
            
        ELSE IF DESIRED_RESULT IS EQUAL TO "LOSE" AND OP_PLAY IS EQUAL TO "PAPER"    THEN
            ADD ROCK AND LOSE IN SCORE
            
        ELSE IF DESIRED_RESULT IS EQUAL TO "LOSE" AND OP_PLAY IS EQUAL TO "SCISSORS" THEN
            ADD PAPER AND LOSE IN SCORE
        ELSE
            DISPLAY "Invalid play " OP_PLAY " with result " DESIRED_RESULT CRLF
            EXIT
        END IF
        DISPLAY "Score for play " OP_PLAY " ending in " DESIRED_RESULT " is " SCORE CRLF
END SUB-PROCEDURE
CREATE STATEMENT "GET SCORE FOR $ RESULTING IN $ IN $" EXECUTING GET_SCORE_FOR_DESIRED_RESULT