PROCEDURE:

SUB-PROCEDURE SWAP_NUMBER_VALUES
    # SWAPS THE VALUES OF TWO NUMERIC VARIABLES
    PARAMETERS:
        A IS NUMBER
        B IS NUMBER
    LOCAL DATA:
        AUX IS NUMBER
    PROCEDURE:
        STORE A IN AUX
        STORE B IN A
        STORE AUX IN B
END SUB-PROCEDURE
CREATE STATEMENT "SWAP $ AND $" EXECUTING SWAP_NUMBER_VALUES

SUB-PROCEDURE SORT_LIST_OF_NUMBERS
    # SORTS A LIST OF NUMBERS IN PLACE IN DESCENDING ORDER
    PARAMETERS:
        L IS LIST OF NUMBERS
    LOCAL DATA:
        I           IS NUMBER
        J           IS NUMBER
        LIST_LENGTH IS NUMBER
        AUX         IS NUMBER
    PROCEDURE:
        GET LENGTH OF L IN LIST_LENGTH
        FOR I FROM 0 TO LIST_LENGTH STEP 1 DO
            FOR J FROM I TO LIST_LENGTH STEP 1 DO
                IF L:J IS GREATER THAN L:I THEN
                    STORE L:J IN AUX
                    STORE L:I IN L:J
                    STORE AUX IN L:I
                END IF
            REPEAT
        REPEAT
END SUB-PROCEDURE
CREATE STATEMENT "SORT LIST $ DESC" EXECUTING SORT_LIST_OF_NUMBERS

SUB-PROCEDURE SORT_LIST_OF_NUMBERS_ASC
    # SORTS A LIST OF NUMBERS IN PLACE IN ASCENDING ORDER
    PARAMETERS:
        L IS LIST OF NUMBERS
    LOCAL DATA:
        I           IS NUMBER
        J           IS NUMBER
        LIST_LENGTH IS NUMBER
        AUX         IS NUMBER
    PROCEDURE:
        GET LENGTH OF L IN LIST_LENGTH
        FOR I FROM 0 TO LIST_LENGTH STEP 1 DO
            FOR J FROM I TO LIST_LENGTH STEP 1 DO
                IF L:J IS LESS THAN L:I THEN
                    STORE L:J IN AUX
                    STORE L:I IN L:J
                    STORE AUX IN L:I
                END IF
            REPEAT
        REPEAT
END SUB-PROCEDURE
CREATE STATEMENT "SORT LIST $ ASC" EXECUTING SORT_LIST_OF_NUMBERS_ASC

SUB-PROCEDURE PRINT_NUMBER_LIST
    # PRINTS A LIST OF NUMBERS
    PARAMETERS:
        L IS LIST OF NUMBERS
    LOCAL DATA:
        I       IS NUMBER
        LEN     IS NUMBER
        PREV    IS NUMBER
    PROCEDURE:
        GET LENGTH OF L IN LEN
        SUBTRACT 1 FROM LEN IN PREV
        DISPLAY "["
        FOR I FROM 0 TO LEN STEP 1 DO
            DISPLAY L:I
            IF I IS LESS THAN PREV THEN
                DISPLAY " -> "
            END IF
        REPEAT
        DISPLAY "] (" LEN
        IF LEN IS EQUAL TO 1 THEN
            DISPLAY " element)"
        ELSE
            DISPLAY " elements)"
        END IF
END SUB-PROCEDURE
CREATE STATEMENT "DISPLAY LIST $" EXECUTING PRINT_NUMBER_LIST

SUB-PROCEDURE PRINT_TEXT_LIST
    # PRINTS A LIST OF TEXT
    PARAMETERS:
        L IS LIST OF TEXT
    LOCAL DATA:
        I       IS NUMBER
        LEN     IS NUMBER
        PREV    IS NUMBER
    PROCEDURE:
        GET LENGTH OF L IN LEN
        SUBTRACT 1 FROM LEN IN PREV
        DISPLAY "["
        FOR I FROM 0 TO LEN STEP 1 DO
            DISPLAY L:I
            IF I IS LESS THAN PREV THEN
                DISPLAY " -> "
            END IF
        REPEAT
        DISPLAY "] (" LEN
        IF LEN IS EQUAL TO 1 THEN
            DISPLAY " element)"
        ELSE
            DISPLAY " elements)"
        END IF
END SUB-PROCEDURE
CREATE STATEMENT "DISPLAY LIST $" EXECUTING PRINT_TEXT_LIST


SUB-PROCEDURE REVERSE_TEXT_LIST
    PARAMETERS:
        INPUT_LIST IS LIST OF TEXT
    LOCAL DATA:
        AUX_LIST IS LIST OF TEXT
        LLENGTH IS NUMBER
    PROCEDURE:
        GET LENGTH OF INPUT_LIST IN LLENGTH
        COPY INPUT_LIST TO AUX_LIST
        CLEAR INPUT_LIST
        WHILE LLENGTH IS GREATER THAN 0 DO
            SUBTRACT 1 FROM LLENGTH IN LLENGTH
            PUSH AUX_LIST:LLENGTH TO INPUT_LIST
        REPEAT
END SUB-PROCEDURE
CREATE STATEMENT "REVERSE LIST $" EXECUTING REVERSE_TEXT_LIST
